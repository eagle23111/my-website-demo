plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'nu.studer.jooq' version '8.1'
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
repositories {
	mavenCentral()
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	jooqGenerator 'org.postgresql:postgresql:42.5.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
}


jooq {
	version = "3.17.18"
	configurations {
		main {
			generationTool {
				logging = 'WARN'
				jdbc {
					driver = 'org.postgresql.Driver'
					url = "jdbc:postgresql://localhost:5432/postgres"
					user = "perelyginstanislas"
					password = ""
				}
				generator {
					name = 'org.jooq.codegen.JavaGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						includes = '.*'
						excludes = '^(Fly|XFly).*'
						schemata {
							schema {
								inputSchema = "purchase"
							}
						}
					}
					target {
						packageName = 'jooqdata'
						directory = "src/main/java/jooq"
					}
					generate {
						newline = '\\r\\n'
						javaTimeTypes = true
						records = true
						relations = true
						daos = false
						deprecated = false
						instanceFields = true
						pojos = true
						immutablePojos = true
						fluentSetters = true
					}
					strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
				}
			}
		}
	}
}
tasks.named('test') {
	useJUnitPlatform()
}
